<!DOCTYPE html>
<html>

<% include ./partials/header %>

	<body>
		<% include ./partials/navbar %>
			<% include ./partials/scripts %>

				<div id="Windows" class="GameContainer">
					<canvas id="WindowsGameSpace" width="1500px" height="750px"></canvas>
				</div>
				<p><span id="ScreenX"></span>&nbsp&nbsp<span id="ScreenY"></span></p>
				<p>Player Count: <span id="PlayerCount"></span></p>
				<p><span id="xLocation"></span>&nbsp&nbsp<span id="yLocation"></span>&nbsp&nbsp&nbsp&nbsp<span
						id="Direction"></span></p>

				<script>

					let time = 0;
					let game = document.getElementById("WindowsGameSpace").getContext("2d");
					let PlayerList = [];
					let ThroughTestPlayers = true;
					let ThroughTestData = true;
					let WallCheck = [0, 1, 2, 3, 4, 5, 6];
					let Delay = 16.67;
					let TimerCheckUp = null;
					let TimerCheckDown = null;
					let TimerCheckLeft = null;
					let TimerCheckRight = null;

					let Player = {
						id: "<%= locals.user._id %>",
						Name: "<%= locals.user.username %>",
						xLocation: <%= locals.user.player.xLocation %>,
						yLocation: <%= locals.user.player.yLocation %>,
						xScreen: <%= locals.user.player.xScreen %>,
						yScreen: <%= locals.user.player.yScreen %>,
						Speed: <%= locals.user.player.Speed %>,
						Direction: "<%= locals.user.player.Direction %>",
						Movement: {
							Upward: <%= locals.user.player.Movement.Upward %>,
							Downward: <%= locals.user.player.Movement.Downward %>,
							Left: <%= locals.user.player.Movement.Left %>,
							Right: <%= locals.user.player.Movement.Right %>,
						}
					}

					setInterval(FindPlayers, 20);
					setInterval(UploadPlayer, 20);

					/*
					Create an array for the players facing right and an array for the players facing left
					then once both arrays are made, render the right facing players with one image object,
					then render the left facing players with another, seperate image object
					*/


					window.requestAnimationFrame(GameFrame);

					function GameFrame() {
						MovementCheck();
						LoadPlayer();
						LoadPlayers();
						document.getElementById("ScreenX").innerHTML = Player.xScreen;
						document.getElementById("ScreenY").innerHTML = Player.yScreen;

						document.getElementById("xLocation").innerHTML = Player.xLocation;
						document.getElementById("yLocation").innerHTML = Player.yLocation;

						document.getElementById("Direction").innerHTML = Player.Direction;
						window.requestAnimationFrame(GameFrame);
					}

					function LoadPlayers() {
						document.getElementById("PlayerCount").innerHTML = PlayerList.length;
						

						for (let i = 0; i < PlayerList.length; i++) {
							MultiplayerAvatar = new Image();
							MultiplayerAvatar.onload = function () {
								game.drawImage(MultiplayerAvatar, PlayerList[i].xLocation - (52 / 2), PlayerList[i].yLocation - (75 / 2), 52, 75);
								game.font = '12px Arial';
								game.fillStyle = "black";
								let textlength = game.measureText(PlayerList[i].Name);
								game.fillText(PlayerList[i].Name, PlayerList[i].xLocation - (textlength.width / 2) - 9, PlayerList[i].yLocation - (75 / 2));
							}

							if (PlayerList[i].Direction == "Right") {
								MultiplayerAvatar.src = "/images/Player/Player.png";
								//console.log(JSON.stringify(PlayerList[i]));
							} else if (PlayerList[i].Direction == "Left") {
								MultiplayerAvatar.src = "/images/Player/PlayerLeft.png";
							}
						}

					}

					function LoadPlayer() {
						PlayerAvatar = new Image();
						PlayerAvatar.onload = function () {
							Clear();
							game.drawImage(PlayerAvatar, Player.xLocation - (52 / 2), Player.yLocation - (75 / 2), 52, 75);
							game.font = '12px Arial';
							game.fillStyle = "black";
							let textlength = game.measureText(Player.Name);
							game.fillText(Player.Name, Player.xLocation - (textlength.width / 2) - 9, Player.yLocation - (75 / 2));
						}

						if (Player.Direction == "Right") {
							PlayerAvatar.src = "/images/Player/Player.png";
						} else if (Player.Direction == "Left") {
							PlayerAvatar.src = "/images/Player/PlayerLeft.png";
						}
					}

					function Clear() {
						if (Player.xScreen == 0 && Player.yScreen == 0) {
							MapScreen = new Image();
							MapScreen.src = "/images/Map/X0Y0.png";
							game.drawImage(MapScreen, 0, 0, 1500, 750);
						} else {
							game.beginPath();
							game.fillStyle = "green";
							game.fillRect(0, 0, 1500, 750);
						}
					}

					function FindPlayers() {
						if (ThroughTestPlayers == true) {
							ThroughTestPlayers = false;
							$.get("game/renderPlayers", { Name: Player.Name, xScreen: Player.xScreen, yScreen: Player.yScreen }, function (Players) {
								PlayerList = [];
								for (let i = 0; i < Players.length; i++) {
									let PlayerCharacter = new TempCharacter(
										Players[i].username,
										Players[i].player.xLocation,
										Players[i].player.yLocation,
										Players[i].player.Speed,
										Players[i].player.Direction
									);
									console.log(JSON.stringify(Players[i]));
									PlayerList.push(PlayerCharacter);
								}
								ThroughTestPlayers = true;
							});
						}
					}

					function TempCharacter(Name, xLocation, yLocation, Speed, Direction) {
						this.Name = Name;
						this.xLocation = xLocation;
						this.yLocation = yLocation;
						this.Speed = Speed;
						this.Direction = Direction;
					}

					function UploadPlayer() {
						if (ThroughTestData == true) {
							ThroughTestData = false;
							$.ajax({
								url: 'game/updatePlayer',
								type: 'PUT',
								data: {
									id: Player.id,
									Username: Player.Name,
									xScreen: Player.xScreen,
									yScreen: Player.yScreen,
									xLocation: Player.xLocation,
									yLocation: Player.yLocation,
									Speed: Player.Speed,
									Direction: Player.Direction,
									Movement: {
										Upward: Player.Movement.Upward,
										Downward: Player.Movement.Downward,
										Left: Player.Movement.Left,
										Right: Player.Movement.Right
									}
								},
								success: function (result) {
									ThroughTestData = true;
								}
							});
						}
					}

					function DrawGame() {

					}

					function MovementCheck() {
						if (Player.yLocation <= 55 && WallCheck.indexOf(Player.xScreen) != -1 && Player.yScreen == 0) {
							Player.Movement.Upward = false;
						} else {
							Player.Movement.Upward = true;
						}

						if (Player.yLocation >= 685 && WallCheck.indexOf(Player.xScreen) != -1 && Player.yScreen == 6) {
							Player.Movement.Downward = false;
						} else {
							Player.Movement.Downward = true;
						}

						if (Player.xLocation <= 55 && WallCheck.indexOf(Player.yScreen) != -1 && Player.xScreen == 0) {
							Player.Movement.Left = false;
						} else {
							Player.Movement.Left = true;
						}

						if (Player.xLocation >= 1450 && WallCheck.indexOf(Player.yScreen) != -1 && Player.xScreen == 6) {
							Player.Movement.Right = false;
						} else {
							Player.Movement.Right = true;
						}
					}

					function Move(Direction) {
						switch (Direction) {
							case 1:
								if (Player.Movement.Upward == true) {
									Player.yLocation -= Player.Speed;
								}
								break;
							case 2:
								if (Player.Movement.Downward == true) {
									Player.yLocation += Player.Speed;
								}
								break;
							case 3:
								if (Player.Movement.Left == true) {
									Player.xLocation -= Player.Speed;
								}
								Player.Direction = "Left";
								break;
							case 4:
								if (Player.Movement.Right == true) {
									Player.xLocation += Player.Speed;
								}
								Player.Direction = "Right";
						}
						if (Player.xLocation > 1500) {
							Player.xLocation -= 1500;
							Player.xScreen += 1;
						}
						if (Player.xLocation < 0) {
							Player.xLocation += 1500;
							Player.xScreen -= 1;
						}
						if (Player.yLocation > 750) {
							Player.yLocation -= 750;
							Player.yScreen += 1;
						}
						if (Player.yLocation < 0) {
							Player.yLocation += 750;
							Player.yScreen -= 1;
						}
					}

					$("body").keydown(function (Key) {
						if (Key.which == 38) {
							if (TimerCheckUp == null) {
								TimerCheckUp = setInterval(Move, Delay, 1);
							}
						} else if (Key.which == 40) {
							if (TimerCheckDown == null) {
								TimerCheckDown = setInterval(Move, Delay, 2);
							}
						} else if (Key.which == 37) {
							if (TimerCheckLeft == null) {
								TimerCheckLeft = setInterval(Move, Delay, 3);
							}
						} else if (Key.which == 39) {
							if (TimerCheckRight == null) {
								TimerCheckRight = setInterval(Move, Delay, 4);
							}
						} else if (Key.which == 90) {
							Use();
						}
					});

					$("body").keyup(function (Key) {
						if (Key.which == 38) {
							clearInterval(TimerCheckUp);
							TimerCheckUp = null;
						} else if (Key.which == 40) {
							clearInterval(TimerCheckDown);
							TimerCheckDown = null;
						} else if (Key.which == 37) {
							clearInterval(TimerCheckLeft);
							TimerCheckLeft = null;
						} else if (Key.which == 39) {
							clearInterval(TimerCheckRight);
							TimerCheckRight = null;
						} else if (Key.which == 90) {
							Use();
						}
					});

				</script>

	</body>

</html>